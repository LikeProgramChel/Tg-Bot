import telebot
from telebot import types
import json
import os
from flask import Flask, render_template, request, redirect, url_for
from flask_httpauth import HTTPBasicAuth
from flask_wtf import FlaskForm
from wtforms import HiddenField, SubmitField, IntegerField
from wtforms.validators import NumberRange
from flask_wtf.csrf import CSRFProtect
import threading
from threading import Lock
import logging
from config import TOKEN, ADMIN_USERNAME, ADMIN_PASSWORD, SECRET_KEY
from faker import Faker
import random
import time
import unicodedata
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
DATA_FILE = 'users.json'
bot = telebot.TeleBot(TOKEN)

logging.basicConfig(filename='logs.log', level=logging.INFO, format='%(asctime)s - %(message)s')

users_lock = Lock()
users_cache = None
fake = Faker('ru_RU')

def load_users():
    global users_cache
    with users_lock:
        if users_cache is None:
            if os.path.exists(DATA_FILE):
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    users_cache = json.load(f)
            else:
                users_cache = {}
        return users_cache

def save_users(users_data):
    global users_cache
    with users_lock:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
        users_cache = users_data

user_template = {
    "name": "",
    "age": 0,
    "gender": "",
    "bio": "",
    "photo_id": "",
    "likes": [],
    "dislikes": [],
    "state": "MENU",
    "preferred_gender": "",
    "preferred_age_min": 18,
    "preferred_age_max": 100,
    "is_blocked": False,
    "is_virtual": False,
    "op_status": False,
    "username": ""
}

users = load_users()

def cancel_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    
    if user_id not in users:
        users[user_id] = user_template.copy()
        users[user_id]['state'] = 'REG_NAME'
        save_users(users)
        bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
        users[user_id]['username'] = message.from_user.username
    else:
        users[user_id]['state'] = 'MENU'
        save_users(users)
        show_main_menu(message.chat.id)
        if users[user_id]["name"] == "":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            users_data = load_users()
            del users_data[user_id]
            start(message)

@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_registration(message):
    user_id = str(message.from_user.id)
    if user_id in users and users[user_id]['state'].startswith('REG_'):
        users[user_id]['state'] = 'MENU'
        save_users(users)
        bot.send_message(message.chat.id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: unicodedata.normalize('NFKC', m.text.strip()) in ["üîç –ò—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "admin563"])
def handle_menu(message):
    user_id = str(message.from_user.id)
    normalized_text = message.text
    logging.info(f"Menu button pressed by {user_id}: {normalized_text}. He`s id: @{message.from_user.username}")
    try:
        if user_id not in users:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        if users[user_id].get('is_blocked', False):
            bot.send_message(message.chat.id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return

        if normalized_text == "üîç –ò—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã":
            candidates = find_profiles(user_id)
            if candidates:
                users[user_id]['current_candidate'] = candidates[0]
                save_users(users)
                show_profile(message.chat.id, candidates[0])
            else:
                bot.send_message(message.chat.id, "üòî –ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        elif normalized_text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            show_own_profile(message)
        elif normalized_text == "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
            edit_profile(message)
        elif normalized_text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            bot.send_message(message.chat.id, "üì® Username –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @hello_im_roman")
        elif normalized_text == "admin563":
            if users[user_id]["op_status"] == "true":
                bot.send_message(message.chat.id, "üîê Hello, dev! Admin panel is available on http://147.45.104.113:3000/. Login: admin, pass = roman")
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è Hey! You dont have permissions to this command! If you dev: @hello_im_roman.")
    except Exception as e:
        logging.error(f"Error in handle_menu for user {user_id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    normalized_text = unicodedata.normalize('NFKC', message.text.strip())
    logging.info(f"Received text from {user_id}: {normalized_text}")
    user = users.get(user_id)
    if not user:
        return start(message)
    if user.get('is_blocked', False):
        bot.send_message(message.chat.id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    state = user['state']

    try:
        if state == 'REG_NAME':
            users[user_id]['name'] = normalized_text
            users[user_id]['state'] = 'REG_AGE'
            save_users(users)
            bot.send_message(message.chat.id, "üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

        elif state == 'REG_AGE':
            if normalized_text.isdigit():
                age = int(normalized_text)
                if age > 50 or age < 14:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 50 –ª–µ—Ç!")
                    return
                users[user_id]['age'] = age
                users[user_id]['state'] = 'REG_BIO'
                save_users(users)
                bot.send_message(message.chat.id, "üìù –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:")
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        elif state == 'REG_BIO':
            users[user_id]['bio'] = normalized_text
            users[user_id]['state'] = "REG_PREF_GENDER"
            save_users(users)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π")
            bot.send_message(message.chat.id, "üîç –ö–∞–∫–æ–π –ø–æ–ª —Ç—ã –∏—â–µ—à—å?", reply_markup=markup)

        elif state == 'REG_PREF_GENDER':
            if normalized_text in ["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]:
                users[user_id]['preferred_gender'] = "–ú" if "–ú—É–∂—Å–∫–æ–π" in normalized_text else "–ñ"
                users[user_id]['state'] = 'REG_PREF_AGE'
                save_users(users)
                bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18-30):")
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")

        elif state == 'REG_PREF_AGE':
            if '-' in normalized_text:
                try:
                    age_min, age_max = map(int, normalized_text.split('-'))
                    if age_min >= age_max or age_min < 14 or age_max > 50:
                        raise ValueError
                    users[user_id]['preferred_age_min'] = age_min
                    users[user_id]['preferred_age_max'] = age_max
                    users[user_id]['state'] = 'REG_PHOTO'
                    save_users(users)
                    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å - –Ω–∞–ø–∏—à–∏ '‚ùå –û—Ç–º–µ–Ω–∞'!",
                                   reply_markup=cancel_button())
                except Exception as e:
                    logging.error(f"Invalid age range: {e}")
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 18-30\n–î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 50 –ª–µ—Ç!")
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–º–∏–Ω-–º–∞–∫—Å', –Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35")

        elif state == 'REG_PHOTO' and normalized_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            users[user_id]['state'] = 'MENU'
            save_users(users)
            bot.send_message(message.chat.id, "üñºÔ∏è –§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                           reply_markup=types.ReplyKeyboardRemove())
            show_main_menu(message.chat.id)

    except Exception as e:
        logging.error(f"Error in handle_text for user {user_id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = str(message.from_user.id)
    user = users.get(user_id)
    if user and user['state'] == 'REG_PHOTO':
        users[user_id]['photo_id'] = message.photo[-1].file_id
        users[user_id]['state'] = 'MENU'
        save_users(users)
        bot.send_message(message.chat.id, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        show_main_menu(message.chat.id)

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üîç –ò—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    markup.row("‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    bot.send_message(chat_id, "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

def find_profiles(user_id, users_data=None):
    if users_data is None:
        users_data = load_users()
    
    current_user = users_data[user_id]
    candidates = []
    
    for uid, profile in users_data.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        if (uid == user_id or
            not profile.get('photo_id') or
            profile.get('is_blocked', False) or
            uid in current_user['likes'] or
            uid in current_user['dislikes']):
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
        gender_ok = (not current_user['preferred_gender'] or 
                     profile['gender'] == current_user['preferred_gender'])
        age_ok = (current_user['preferred_age_min'] <= profile['age'] <= current_user['preferred_age_max'])
        
        if gender_ok and age_ok:
            candidates.append(uid)
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    random.shuffle(candidates)
    return candidates

def show_profile(chat_id, profile_id, users_data=None):
    if users_data is None:
        users_data = load_users()
    
    profile = users_data[profile_id]
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ username
    username_info = f"\nüí¨ –ù–∞–ø–∏—à–∏: @{profile['username']}" if profile.get('username') else ""
    
    caption = (f"üë§ {profile['name']}, {profile['age']}\n"
               f"üìù {profile['bio']}"
               f"{username_info}")
    
    try:
        bot.send_photo(
            chat_id,
            profile['photo_id'],
            caption=caption,
            reply_markup=generate_action_buttons()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã: {profile['name']}")

def generate_action_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data="like"),
        types.InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data="dislike")
    )
    return markup

@bot.message_handler(commands=['profile'])
def show_own_profile(message):
    user_id = str(message.from_user.id)
    if user_id in users and users[user_id]['state'] == 'MENU':
        if users[user_id].get('is_blocked', False):
            bot.send_message(message.chat.id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        profile = users[user_id]
        caption = f"üìå –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë§ –ò–º—è: {profile['name']}\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\nüîç –ü–æ–ª: {profile['gender']}\nüìù –û —Å–µ–±–µ: {profile['bio']}\nüí¨ Username: @{profile['username']}"
        if profile['photo_id']:
            bot.send_photo(message.chat.id, profile['photo_id'], caption=caption)
        else:
            bot.send_message(message.chat.id, caption)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")

@bot.message_handler(commands=['edit_profile'])
def edit_profile(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        if users[user_id].get('is_blocked', False):
            bot.send_message(message.chat.id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        users[user_id]['state'] = 'REG_NAME'
        save_users(users)
        bot.send_message(message.chat.id, "‚úèÔ∏è –î–∞–≤–∞–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=cancel_button())
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    users_data = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_id = str(call.from_user.id)
    
    if user_id not in users_data:
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return

    current_user = users_data[user_id]
    if current_user.get('is_blocked', False):
        bot.answer_callback_query(call.id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if 'current_candidate' not in current_user:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    candidate_id = current_user['current_candidate']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if candidate_id not in users_data:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
    if call.data == "like":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–∞–π–∫
        if candidate_id in current_user['likes']:
            bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
            current_user['likes'].append(candidate_id)
            save_users(users_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
            if user_id in users_data[candidate_id].get('likes', []):
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ç—Ç—á–µ
                match_message = f"üíû –ú—ç—Ç—á! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {users_data[candidate_id]['name']}."
                if users_data[candidate_id].get('username'):
                    match_message += f"\nüí¨ –ù–∞–ø–∏—à–∏: @{users_data[candidate_id]['username']}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(user_id, match_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É (–µ—Å–ª–∏ –Ω–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
                if (not users_data[candidate_id].get('is_virtual', False) and 
                    not users_data[candidate_id].get('is_blocked', False)):
                    try:
                        candidate_match_msg = f"üíû –ú—ç—Ç—á! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {users_data[user_id]['name']}."
                        if users_data[user_id].get('username'):
                            candidate_match_msg += f"\nüí¨ –ù–∞–ø–∏—à–∏: @{users_data[user_id]['username']}"
                        bot.send_message(candidate_id, candidate_match_msg)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ç—Ç—á–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: {e}")
                
                bot.answer_callback_query(call.id, "üíû –ú—ç—Ç—á! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!")
            else:
                bot.answer_callback_query(call.id, "‚ù§Ô∏è –¢–≤–æ–π –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞
    elif call.data == "dislike":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–∏–∑–ª–∞–π–∫
        if candidate_id in current_user['dislikes']:
            bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –¥–∏–∑–ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å.")
        else:
            current_user['dislikes'].append(candidate_id)
            save_users(users_data)
            bot.answer_callback_query(call.id, "üëé –î–∏–∑–ª–∞–π–∫")

    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    candidates = find_profiles(user_id, users_data)
    if candidates:
        users_data[user_id]['current_candidate'] = candidates[0]
        save_users(users_data)
        show_profile(call.message.chat.id, candidates[0], users_data)
    else:
        bot.send_message(call.message.chat.id, "üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")

# Flask admin panel setup
app = Flask(__name__)
app.config['SECRET_KEY'] = SECRET_KEY
auth = HTTPBasicAuth()
csrf = CSRFProtect(app)

# –§–æ—Ä–º—ã –¥–ª—è CSRF-–∑–∞—â–∏—Ç—ã
class DeleteUserForm(FlaskForm):
    user_id = HiddenField()
    submit = SubmitField('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å')

class AddOp(FlaskForm):
    user_id = HiddenField()
    submit = SubmitField("üëë –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

class ToggleBlockForm(FlaskForm):
    user_id = HiddenField()
    submit = SubmitField('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å')

class TestUsersForm(FlaskForm):
    count = IntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', validators=[NumberRange(min=1, max=100)])
    submit = SubmitField('üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å')

@auth.verify_password
def verify_password(username, password):
    return username == ADMIN_USERNAME and password == ADMIN_PASSWORD

@app.route('/')
@auth.login_required
def admin_dashboard():
    users_data = load_users()
    stats = {
        'total_users': len(users_data),
        'profiles_with_photo': sum(1 for u in users_data.values() if u['photo_id']),
        'active_profiles': sum(1 for u in users_data.values() if u['state'] == 'MENU'),
    }
    delete_form = DeleteUserForm()
    block_form = ToggleBlockForm()
    return render_template(
        'admin.html',
        users=users_data,
        stats=stats,
        current_user=auth.current_user(),
        delete_form=delete_form,
        block_form=block_form,
    )

@app.route('/user/<user_id>')
@auth.login_required
def view_user(user_id):
    users_data = load_users()
    user = users_data.get(user_id)
    if not user:
        return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return render_template('user.html', user=user, user_id=user_id)

@app.route('/delete_user', methods=['POST'])
@auth.login_required
def delete_user():
    form = DeleteUserForm()
    if form.validate_on_submit():
        user_id = form.user_id.data
        users_data = load_users()
        if user_id in users_data:
            logging.info(f"User {user_id} deleted by admin {auth.current_user()}")
            del users_data[user_id]
            bot.send_message(user_id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω!")
            save_users(users_data)
    return redirect(url_for('admin_dashboard'))

@app.route('/toggle_block_user', methods=['POST'])
@auth.login_required
def toggle_block_user():
    form = ToggleBlockForm()
    if form.validate_on_submit():
        user_id = form.user_id.data
        users_data = load_users()
        if user_id in users_data:
            users_data[user_id]['is_blocked'] = not users_data[user_id].get('is_blocked', False)
            logging.info(f"User {user_id} {'blocked' if users_data[user_id]['is_blocked'] else 'unblocked'} by admin {auth.current_user()}")
            save_users(users_data)
            try:
                bot.send_message(user_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω." if users_data[user_id]['is_blocked'] else "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            except:
                pass
    return redirect(url_for('admin_dashboard'))

@app.route('/test', methods=['GET', 'POST'])
@auth.login_required
def test_users():
    form = TestUsersForm()
    if form.validate_on_submit():
        count = form.count.data
        users_data = load_users()
        for _ in range(count):
            user_id = str(random.randint(1000000000, 9999999999))
            while user_id in users_data:
                user_id = str(random.randint(1000000000, 9999999999))
            users_data[user_id] = user_template.copy()
            users_data[user_id].update({
                'name': fake.first_name(),
                'age': random.randint(18, 50),
                'gender': random.choice(['–ú', '–ñ']),
                'bio': fake.sentence(nb_words=10),
                'photo_id': f"virtual_photo_{user_id}",
                'state': 'MENU',
                'preferred_gender': random.choice(['–ú', '–ñ', '']),
                'preferred_age_min': random.randint(18, 30),
                'preferred_age_max': random.randint(31, 50),
                'is_virtual': True
            })
            logging.info(f"Virtual user {user_id} created by admin {auth.current_user()}")
        save_users(users_data)
        return redirect(url_for('admin_dashboard'))
    return render_template('test.html', form=form)

def run_admin_panel():
    app.run(port=3000, host='127.0.0.1', debug=False, use_reloader=False)

if __name__ == '__main__':
    threading.Thread(target=run_admin_panel, daemon=True).start()
    print("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:3000")
    print(f"üë§ –õ–æ–≥–∏–Ω: {ADMIN_USERNAME}, üîë –ü–∞—Ä–æ–ª—å: {ADMIN_PASSWORD}")

    while True:
        try:
            print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            bot.infinity_polling()
            print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            off = input()
            if off == "stop":
                sys.exit(0)
            else:
                print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É!")
        except Exception as e:
            logging.error(f"Polling error: {e}")
            time.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
